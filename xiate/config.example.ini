# All options are optional, as is this entire file.


[Options]

# If no other argument vector is specified via "-e ...", then a newly
# created terminal window will launch the user's shell. This option
# specifies whether the shell will be a login shell or not.
login_shell = true

# Shall the escape sequence for "bold" also switch to a brighter color?
#
# Historically, X11 terminal emulators interpreted "bold" as "bold font
# AND brighter color". Many programs ask the ncurses API for "A_BOLD,
# COLOR_YELLOW" and expect to get bold, bright yellow. On the other
# hand, there are documents that define this as "bold OR bright", such
# as ECMA-48.
#
# There is currently (2020-ish) a movement to drop the old behaviour
# and only have "bold" make text bold, not bright. The main goal is to
# remove the ambiguity. Since GNOME is pushing this change, it can be
# expected to see wider adoption in the next few years.
#
# More background information on this topic:
#
# - The main ticket for VTE's change (note comment 36, a support matrix):
#   https://bugzilla.gnome.org/show_bug.cgi?id=762247
# - How to deal with it in ncurses applications:
#   https://bugzilla.redhat.com/show_bug.cgi?id=1687141#c3
# - More links:
#   https://github.com/alacritty/alacritty/issues/2779#issuecomment-528782774
bold_is_bright = false

# Default fonts and font sizes. These strings will be parsed by pango,
# see the following URL:
#
# https://developer.gnome.org/pango/stable/pango-Fonts.html#pango-font-description-from-string
#
# You can define multiple fonts, at least one font must be defined. You
# can switch between these fonts during runtime or you can select one
# at startup (by default, the first one will be used). See manpage.
#
# You must use a semicolon as separator. Commas, on the other hand, are
# part of *one* font description. So, in the following line, "qsqs,VGA
# 10" is the first font (use "qsqs" with "VGA" as fallback) and "DejaVu
# Sans Mono 9" the second one.
fonts = qsqs,VGA 10;DejaVu Sans Mono 9;VGA 10;DejaVu Sans Mono 14;DejaVu Sans Mono 72

# Use 0 to disable scrolling completely or a negative value for
# infinite scrolling. Keep the memory footprint in mind, though.
scrollback_lines = 50000

# This regular expression is used to match links. You can easily spot
# them by hovering over them with your mouse. Use a mouse button (see
# "button_link" in section "Controls") to invoke the link handler
# (defined below).
link_regex = [a-z]+://[[:graph:]]+

# Set this to the path of a tool to handle links. It will be invoked
# with the following arguments:
#
#     argv[1] = "explicit" or "match"
#     argv[2] = The link in question
#
# "explicit" will be used for explicit hyperlinks. They are explained
# over here:
#
# https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda
#
# "match" will be used for links that have been found using
# "link_regex" as defined above.
#
# You don't need to specify an absolute path. The tool will be looked
# for in your $PATH.
link_handler = xiate-link-handler

# Set this to the path of a tool to handle history dumps.
#
# History dumps work like this: You press the appropriate hotkey (see
# manpage) to tell xiate to write the entire history of the terminal to
# a temporary file. Once that's done, your tool will be called with the
# path to that file as first argument.
#
# What you do with this file is entirely up to you. It's also your job
# to remove it once you're done with it.
#
# You don't need to specify an absolute path. The tool will be looked
# for in your $PATH.
history_handler = xiate-history-handler

# Whether or not to blink the cursor. One of the following values:
#
# VTE_CURSOR_BLINK_SYSTEM
# VTE_CURSOR_BLINK_ON
# VTE_CURSOR_BLINK_OFF
cursor_blink_mode = VTE_CURSOR_BLINK_OFF

# Shape of the cursor. One of the following values:
#
# VTE_CURSOR_SHAPE_BLOCK
# VTE_CURSOR_SHAPE_IBEAM
# VTE_CURSOR_SHAPE_UNDERLINE
cursor_shape = VTE_CURSOR_SHAPE_BLOCK


[Colors]

# Background color of text under the cursor. There's a special mode:
# "If NULL, text under the cursor will be drawn with foreground and
# background colors reversed." For this mode to be active, you must set
# both "cursor" and "cursor_foreground" to NULL.
cursor = #FF0000

# Foreground color of text under the cursor. Just like the background
# color, NULL reverses foreground and background.
cursor_foreground = #000000

# Quoting from the VTE reference: "Sets the color used to draw bold
# text in the default foreground color. If [...] NULL then the default
# color is used."
bold = NULL

# Set the terminal's color palette. Note that none of these values can
# be NULL.
foreground     = #D9D4CF
background     = #000000
dark_black     = #232323
dark_red       = #FF000F
dark_green     = #8CE10B
dark_yellow    = #FFB900
dark_blue      = #008DF8
dark_magenta   = #6D43A6
dark_cyan      = #00D8EB
dark_white     = #FFFFFF
bright_black   = #444444
bright_red     = #FF2740
bright_green   = #ABE15B
bright_yellow  = #FFD242
bright_blue    = #4FB4FF
bright_magenta = #9A5FEB
bright_cyan    = #67FFF0
bright_white   = #FFFFFF


[Controls]

# Which mouse button to press when hovering over links in order to spawn
# the link handler. Quoting from the GTK docs:
#
# "the button which was pressed or released, numbered from 1 to 5.
# Normally button 1 is the left mouse button, 2 is the middle button,
# and 3 is the right button."
#
# https://developer.gnome.org/gdk3/stable/gdk3-Event-Structures.html#GdkEventButton
button_link = 3

# The names are the same as those in the `gdk/gdkkeysyms.h` header file
# but without the leading "GDK_KEY_". (For lower case, use something
# like "i" for "GDK_KEY_i".) All of these hotkeys have to be invoked as
# Ctrl+$key, so using upper case letters makes it Ctrl+Shift+$key.
key_copy_to_clipboard = C
key_paste_from_clipboard = V
key_handle_history = H
key_next_font = N
key_previous_font = P
key_zoom_in = I
key_zoom_out = O
key_zoom_reset = R
